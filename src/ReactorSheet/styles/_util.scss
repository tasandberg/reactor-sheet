@use "sass:map";

$spacer1: 0.25rem;
$spacer2: 0.5rem;
$spacer3: 1rem;
$spacer4: 1.5rem;
$spacer5: 3rem;

$justify-options: (
  "start": flex-start,
  "end": flex-end,
  "center": center,
  "between": space-between,
  "around": space-around,
  "evenly": space-evenly,
);

$colors: (
  "primary": #007bff,
  "secondary": #6c757d,
  "success": #28a745,
  "danger": #dc3545,
  "warning": #ffc107,
  "info": #17a2b8,
  "light": #f8f9fa,
  "dark": #343a40,
  "transparent": transparent,
);

.flex-row {
  display: flex;
  flex-direction: row;
  gap: 1rem;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-col {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.w-100 {
  width: 100%;
}

@each $name, $value in $justify-options {
  .justify-#{$name} {
    justify-content: $value;
  }
}

@each $name, $value in $justify-options {
  .align-#{$name} {
    align-items: $value;
  }
}

$directions: (
  "": "",
  "l": "-left",
  "r": "-right",
  "t": "-top",
  "b": "-bottom",
);

@each $dir, $side in $directions {
  @for $i from 0 through 4 {
    .p#{$dir}-#{$i} {
      @if $i == 0 {
        padding#{$side}: 0;
      } @else {
        padding#{$side}: #{map.get(
            (
              1: $spacer1,
              2: $spacer2,
              3: $spacer3,
              4: $spacer4,
            ),
            $i
          )};
      }
    }
  }
}

@each $dir, $side in $directions {
  @for $i from 0 through 4 {
    .m#{$dir}-#{$i} {
      @if $i == 0 {
        margin#{$side}: 0;
      } @else {
        margin#{$side}: #{map.get(
            (
              1: $spacer1,
              2: $spacer2,
              3: $spacer3,
              4: $spacer4,
            ),
            $i
          )};
      }
    }
  }
}

@for $i from 0 through 4 {
  .gap-#{$i} {
    @if $i == 0 {
      gap: 0;
    } @else {
      gap: #{map.get(
          (
            1: $spacer1,
            2: $spacer2,
            3: $spacer3,
            4: $spacer4,
          ),
          $i
        )};
    }
  }
}

@each $name, $value in $colors {
  .border-#{$name} {
    border: 1px solid $value;
  }
}

@each $name, $value in $colors {
  .bg-#{$name} {
    background-color: $value;
  }
  @each $dir, $side in $directions {
    .border#{$side}-#{$name} {
      border#{$side}: 1px solid $value;
    }
  }
}

.opacity-0 {
  opacity: 0;
}

.border-rounded {
  border-radius: $spacer1;
}

// Typography
.header-style {
  font-family: var(--font-h1);
  font-weight: bold;
  color: var(--color-text-emphatic);
}

.text-secondary {
  color: var(--color-text-secondary);
}
.text-emphatic {
  color: var(--color-text-emphatic);
}

// Effects/Animations
.bloody-box {
  &:hover {
    background: radial-gradient(
      circle at 10%,
      transparent 50%,
      rgba(crimson, 0.9) 100%
    );
    color: var(--color-text-secondary);
    transition: background 0.3s, color 0.3s;
  }
}

$position-options: (
  "static": static,
  "relative": relative,
  "absolute": absolute,
  "fixed": fixed,
  "sticky": sticky,
);

@each $name, $value in $position-options {
  .position-#{$name} {
    position: $value;
  }
}

$overflow-options: (
  "visible": visible,
  "hidden": hidden,
  "scroll": scroll,
  "auto": auto,
);

@each $name, $value in $overflow-options {
  .overflow-#{$name} {
    overflow: $value;
  }
}

.cursor-pointer {
  cursor: pointer;
}
